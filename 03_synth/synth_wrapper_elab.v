
// Generated by Cadence Genus(TM) Synthesis Solution GENUS15.20 - 15.20-p004_1
// Generated on: May 17 2025 05:33:12

// Verification Directory fv/synth_wrapper 

module cla_4bit(a, b, cin, s, cout);
  input [3:0] a, b;
  input cin;
  output [3:0] s;
  output cout;
  wire [3:0] a, b;
  wire cin;
  wire [3:0] s;
  wire cout;
  wire [3:0] p;
  wire [3:0] g;
  wire \c[1] , \c[2] , \c[3] , n_9, n_10, n_11, n_12, n_13;
  wire n_14, n_15, n_17, n_19, n_21, n_22, n_23, n_25;
  wire n_27, n_29, n_32, n_34, n_40;
  and g3 (n_9, p[0], cin);
  or g4 (\c[1] , g[0], n_9);
  and g5 (n_10, p[1], g[0]);
  or g6 (n_12, g[1], n_10);
  and g7 (n_11, p[1], p[0]);
  and g8 (n_13, n_11, cin);
  or g9 (\c[2] , n_12, n_13);
  and g10 (n_14, p[2], g[1]);
  and g12 (n_15, p[2], p[1]);
  and g13 (n_17, n_15, g[0]);
  and g16 (n_19, n_15, p[0]);
  and g17 (n_21, n_19, cin);
  and g19 (n_22, p[3], g[2]);
  and g21 (n_23, p[3], p[2]);
  and g22 (n_25, n_23, g[1]);
  and g25 (n_27, n_23, p[1]);
  and g26 (n_29, n_27, g[0]);
  and g30 (n_32, n_27, p[0]);
  and g31 (n_34, n_32, cin);
  xor g1 (p[0], a[0], b[0]);
  xor g34 (p[1], a[1], b[1]);
  xor g35 (p[2], a[2], b[2]);
  xor g36 (p[3], a[3], b[3]);
  and g37 (g[0], a[0], b[0]);
  and g2 (g[1], a[1], b[1]);
  and g38 (g[2], a[2], b[2]);
  and g39 (g[3], a[3], b[3]);
  xor g40 (s[0], p[0], cin);
  xor g41 (s[1], p[1], \c[1] );
  xor g42 (s[2], p[2], \c[2] );
  xor g43 (s[3], p[3], \c[3] );
  or g44 (\c[3] , g[2], n_14, n_17, n_21);
  or g45 (n_40, g[3], n_22);
  or g46 (cout, n_25, n_29, n_34, n_40);
endmodule

module bmux(ctl, in_0, in_1, z);
  input ctl;
  input [3:0] in_0, in_1;
  output [3:0] z;
  wire ctl;
  wire [3:0] in_0, in_1;
  wire [3:0] z;
  CDN_bmux2 g1(.sel0 (ctl), .data0 (in_0[3]), .data1 (in_1[3]), .z
       (z[3]));
  CDN_bmux2 g2(.sel0 (ctl), .data0 (in_0[2]), .data1 (in_1[2]), .z
       (z[2]));
  CDN_bmux2 g3(.sel0 (ctl), .data0 (in_0[1]), .data1 (in_1[1]), .z
       (z[1]));
  CDN_bmux2 g4(.sel0 (ctl), .data0 (in_0[0]), .data1 (in_1[0]), .z
       (z[0]));
endmodule

module shift_right(a, b, result);
  input [3:0] a, b;
  output [3:0] result;
  wire [3:0] a, b;
  wire [3:0] result;
  wire [3:0] temp_0;
  wire [3:0] temp_1;
  wire n_8, n_21;
  bmux mux_10_18(.ctl (b[0]), .in_0 (a), .in_1 ({1'b0, a[3:1]}), .z
       (temp_0));
  bmux mux_11_18(.ctl (b[1]), .in_0 (temp_0), .in_1 ({2'b00,
       temp_0[3:2]}), .z (temp_1));
  bmux mux_12_18(.ctl (n_8), .in_0 (temp_1), .in_1 (4'b0000), .z
       (result));
  nor g1 (n_21, b[2], b[3]);
  not g5 (n_8, n_21);
endmodule

module shift_left(a, b, result);
  input [3:0] a, b;
  output [3:0] result;
  wire [3:0] a, b;
  wire [3:0] result;
  wire [3:0] temp_0;
  wire [3:0] temp_1;
  wire n_8, n_21;
  bmux mux_10_18(.ctl (b[0]), .in_0 (a), .in_1 ({a[2:0], 1'b0}), .z
       (temp_0));
  bmux mux_11_18(.ctl (b[1]), .in_0 (temp_0), .in_1 ({temp_0[1:0],
       2'b00}), .z (temp_1));
  bmux mux_12_18(.ctl (n_8), .in_0 (temp_1), .in_1 (4'b0000), .z
       (result));
  nor g1 (n_21, b[2], b[3]);
  not g5 (n_8, n_21);
endmodule

module bmux_6(ctl, in_0, in_1, z);
  input ctl, in_0, in_1;
  output z;
  wire ctl, in_0, in_1;
  wire z;
  CDN_bmux2 g1(.sel0 (ctl), .data0 (in_0), .data1 (in_1), .z (z));
endmodule

module bmux_8(ctl, in_0, in_1, in_2, in_3, in_4, in_5, in_6, in_7, z);
  input [2:0] ctl;
  input [3:0] in_0, in_1, in_2, in_3, in_4, in_5, in_6, in_7;
  output [3:0] z;
  wire [2:0] ctl;
  wire [3:0] in_0, in_1, in_2, in_3, in_4, in_5, in_6, in_7;
  wire [3:0] z;
  CDN_bmux8 g1(.sel0 (ctl[0]), .data0 (in_0[3]), .data1 (in_1[3]),
       .sel1 (ctl[1]), .data2 (in_2[3]), .data3 (in_3[3]), .sel2
       (ctl[2]), .data4 (in_4[3]), .data5 (in_5[3]), .data6 (in_6[3]),
       .data7 (in_7[3]), .z (z[3]));
  CDN_bmux8 g2(.sel0 (ctl[0]), .data0 (in_0[2]), .data1 (in_1[2]),
       .sel1 (ctl[1]), .data2 (in_2[2]), .data3 (in_3[2]), .sel2
       (ctl[2]), .data4 (in_4[2]), .data5 (in_5[2]), .data6 (in_6[2]),
       .data7 (in_7[2]), .z (z[2]));
  CDN_bmux8 g3(.sel0 (ctl[0]), .data0 (in_0[1]), .data1 (in_1[1]),
       .sel1 (ctl[1]), .data2 (in_2[1]), .data3 (in_3[1]), .sel2
       (ctl[2]), .data4 (in_4[1]), .data5 (in_5[1]), .data6 (in_6[1]),
       .data7 (in_7[1]), .z (z[1]));
  CDN_bmux8 g4(.sel0 (ctl[0]), .data0 (in_0[0]), .data1 (in_1[0]),
       .sel1 (ctl[1]), .data2 (in_2[0]), .data3 (in_3[0]), .sel2
       (ctl[2]), .data4 (in_4[0]), .data5 (in_5[0]), .data6 (in_6[0]),
       .data7 (in_7[0]), .z (z[0]));
endmodule

module alu(clk, rst_n, a, b, op, result, carry);
  input clk, rst_n;
  input [3:0] a, b;
  input [2:0] op;
  output [3:0] result;
  output carry;
  wire clk, rst_n;
  wire [3:0] a, b;
  wire [2:0] op;
  wire [3:0] result;
  wire carry;
  wire [3:0] b_value;
  wire [3:0] sum;
  wire [3:0] sright_6;
  wire [3:0] sleft_7;
  wire [3:0] and_2;
  wire [3:0] or_3;
  wire [3:0] xor_4;
  wire [3:0] not_5;
  wire [3:0] p_result;
  wire UNCONNECTED, UNCONNECTED0, UNCONNECTED1, UNCONNECTED2,
       UNCONNECTED3, c, n_7, n_8;
  wire p_carry;
  cla_4bit adder_4bit(.a (a), .b (b_value), .cin (op[0]), .s (sum),
       .cout (c));
  shift_right shift_right_4bit(.a (a), .b (b), .result (sright_6));
  shift_left shift_left_4bit(.a (a), .b (b), .result (sleft_7));
  bmux_6 mux_36_26(.ctl (n_8), .in_0 (c), .in_1 (1'b0), .z (p_carry));
  bmux_6 mux_carry_40_13(.ctl (n_7), .in_0 (p_carry), .in_1 (1'b0), .z
       (UNCONNECTED));
  bmux_8 mux_p_result_24_14(.ctl (op), .in_0 (sum), .in_1 (sum), .in_2
       (and_2), .in_3 (or_3), .in_4 (xor_4), .in_5 (not_5), .in_6
       (sright_6), .in_7 (sleft_7), .z (p_result));
  bmux mux_result_40_13(.ctl (n_7), .in_0 (p_result), .in_1 (4'b0000),
       .z ({UNCONNECTED3, UNCONNECTED2, UNCONNECTED1, UNCONNECTED0}));
  or g6 (n_8, op[2], op[1]);
  not g7 (n_7, rst_n);
  xor g1 (b_value[0], b[0], op[0]);
  xor g12 (b_value[1], b[1], op[0]);
  xor g13 (b_value[2], b[2], op[0]);
  xor g14 (b_value[3], b[3], op[0]);
  and g15 (and_2[0], a[0], b[0]);
  and g2 (and_2[1], a[1], b[1]);
  and g16 (and_2[2], a[2], b[2]);
  and g17 (and_2[3], a[3], b[3]);
  or g18 (or_3[0], a[0], b[0]);
  or g19 (or_3[1], a[1], b[1]);
  or g3 (or_3[2], a[2], b[2]);
  or g20 (or_3[3], a[3], b[3]);
  xor g21 (xor_4[0], a[0], b[0]);
  xor g22 (xor_4[1], a[1], b[1]);
  xor g23 (xor_4[2], a[2], b[2]);
  xor g4 (xor_4[3], a[3], b[3]);
  not g24 (not_5[3], a[3]);
  not g25 (not_5[2], a[2]);
  not g26 (not_5[1], a[1]);
  not g27 (not_5[0], a[0]);
  CDN_flop \result_reg[0] (.clk (clk), .d (p_result[0]), .sena (1'b1),
       .aclr (n_7), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (result[0]));
  CDN_flop \result_reg[1] (.clk (clk), .d (p_result[1]), .sena (1'b1),
       .aclr (n_7), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (result[1]));
  CDN_flop \result_reg[2] (.clk (clk), .d (p_result[2]), .sena (1'b1),
       .aclr (n_7), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (result[2]));
  CDN_flop \result_reg[3] (.clk (clk), .d (p_result[3]), .sena (1'b1),
       .aclr (n_7), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (result[3]));
  CDN_flop carry_reg(.clk (clk), .d (c), .sena (1'b1), .aclr (n_7),
       .apre (1'b0), .srl (n_8), .srd (1'b0), .q (carry));
endmodule

module bmux_10(ctl, in_0, in_1, z);
  input ctl;
  input [2:0] in_0, in_1;
  output [2:0] z;
  wire ctl;
  wire [2:0] in_0, in_1;
  wire [2:0] z;
  CDN_bmux2 g1(.sel0 (ctl), .data0 (in_0[2]), .data1 (in_1[2]), .z
       (z[2]));
  CDN_bmux2 g2(.sel0 (ctl), .data0 (in_0[1]), .data1 (in_1[1]), .z
       (z[1]));
  CDN_bmux2 g3(.sel0 (ctl), .data0 (in_0[0]), .data1 (in_1[0]), .z
       (z[0]));
endmodule

module synth_wrapper(clk, rst_n, a, b, op, result, carry);
  input clk, rst_n;
  input [3:0] a, b;
  input [2:0] op;
  output [3:0] result;
  output carry;
  wire clk, rst_n;
  wire [3:0] a, b;
  wire [2:0] op;
  wire [3:0] result;
  wire carry;
  wire [3:0] a_reg;
  wire [3:0] b_reg;
  wire [2:0] op_reg;
  wire UNCONNECTED4, UNCONNECTED5, UNCONNECTED6, UNCONNECTED7,
       UNCONNECTED8, UNCONNECTED9, UNCONNECTED10, UNCONNECTED11;
  wire UNCONNECTED12, UNCONNECTED13, UNCONNECTED14, UNCONNECTED15,
       UNCONNECTED16, UNCONNECTED17, UNCONNECTED18, UNCONNECTED19;
  wire carry_reg_48, n_17, \result_reg[0]_36 , \result_reg[1]_37 ,
       \result_reg[2]_38 , \result_reg[3]_39 ;
  alu alu_design(.clk (clk), .rst_n (rst_n), .a (a_reg), .b (b_reg),
       .op (op_reg), .result ({\result_reg[3]_39 , \result_reg[2]_38 ,
       \result_reg[1]_37 , \result_reg[0]_36 }), .carry (carry_reg_48));
  bmux_10 mux_op_reg_17_10(.ctl (n_17), .in_0 (op), .in_1 (3'b000), .z
       ({UNCONNECTED6, UNCONNECTED5, UNCONNECTED4}));
  bmux mux_b_reg_17_10(.ctl (n_17), .in_0 (b), .in_1 (4'b0000), .z
       ({UNCONNECTED10, UNCONNECTED9, UNCONNECTED8, UNCONNECTED7}));
  bmux mux_a_reg_17_10(.ctl (n_17), .in_0 (a), .in_1 (4'b0000), .z
       ({UNCONNECTED14, UNCONNECTED13, UNCONNECTED12, UNCONNECTED11}));
  bmux_6 mux_carry_17_10(.ctl (n_17), .in_0 (carry_reg_48), .in_1
       (1'b0), .z (UNCONNECTED15));
  bmux mux_result_17_10(.ctl (n_17), .in_0 ({\result_reg[3]_39 ,
       \result_reg[2]_38 , \result_reg[1]_37 , \result_reg[0]_36 }),
       .in_1 (4'b0000), .z ({UNCONNECTED19, UNCONNECTED18,
       UNCONNECTED17, UNCONNECTED16}));
  not g1 (n_17, rst_n);
  CDN_flop \result_reg[0] (.clk (clk), .d (\result_reg[0]_36 ), .sena
       (1'b1), .aclr (n_17), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (result[0]));
  CDN_flop \result_reg[1] (.clk (clk), .d (\result_reg[1]_37 ), .sena
       (1'b1), .aclr (n_17), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (result[1]));
  CDN_flop \result_reg[2] (.clk (clk), .d (\result_reg[2]_38 ), .sena
       (1'b1), .aclr (n_17), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (result[2]));
  CDN_flop \result_reg[3] (.clk (clk), .d (\result_reg[3]_39 ), .sena
       (1'b1), .aclr (n_17), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (result[3]));
  CDN_flop carry_reg(.clk (clk), .d (carry_reg_48), .sena (1'b1), .aclr
       (n_17), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (carry));
  CDN_flop \a_reg_reg[0] (.clk (clk), .d (a[0]), .sena (1'b1), .aclr
       (n_17), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (a_reg[0]));
  CDN_flop \a_reg_reg[1] (.clk (clk), .d (a[1]), .sena (1'b1), .aclr
       (n_17), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (a_reg[1]));
  CDN_flop \a_reg_reg[2] (.clk (clk), .d (a[2]), .sena (1'b1), .aclr
       (n_17), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (a_reg[2]));
  CDN_flop \a_reg_reg[3] (.clk (clk), .d (a[3]), .sena (1'b1), .aclr
       (n_17), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (a_reg[3]));
  CDN_flop \b_reg_reg[0] (.clk (clk), .d (b[0]), .sena (1'b1), .aclr
       (n_17), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (b_reg[0]));
  CDN_flop \b_reg_reg[1] (.clk (clk), .d (b[1]), .sena (1'b1), .aclr
       (n_17), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (b_reg[1]));
  CDN_flop \b_reg_reg[2] (.clk (clk), .d (b[2]), .sena (1'b1), .aclr
       (n_17), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (b_reg[2]));
  CDN_flop \b_reg_reg[3] (.clk (clk), .d (b[3]), .sena (1'b1), .aclr
       (n_17), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (b_reg[3]));
  CDN_flop \op_reg_reg[0] (.clk (clk), .d (op[0]), .sena (1'b1), .aclr
       (n_17), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (op_reg[0]));
  CDN_flop \op_reg_reg[1] (.clk (clk), .d (op[1]), .sena (1'b1), .aclr
       (n_17), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (op_reg[1]));
  CDN_flop \op_reg_reg[2] (.clk (clk), .d (op[2]), .sena (1'b1), .aclr
       (n_17), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (op_reg[2]));
endmodule

`ifdef RC_CDN_GENERIC_GATE
`else
module CDN_flop(clk, d, sena, aclr, apre, srl, srd, q);
  input clk, d, sena, aclr, apre, srl, srd;
  output q;
  wire clk, d, sena, aclr, apre, srl, srd;
  wire q;
  reg  qi;
  assign #1 q = qi;
  always 
    @(posedge clk or posedge apre or posedge aclr) 
      if (aclr) 
        qi <= 0;
      else if (apre) 
          qi <= 1;
        else if (srl) 
            qi <= srd;
          else begin
            if (sena) 
              qi <= d;
          end
  initial 
    qi <= 1'b0;
endmodule
`endif
`ifdef RC_CDN_GENERIC_GATE
`else
`ifdef ONE_HOT_MUX
module CDN_bmux2(sel0, data0, data1, z);
  input sel0, data0, data1;
  output z;
  wire sel0, data0, data1;
  reg  z;
  always 
    @(sel0 or data0 or data1) 
      case ({sel0})
       1'b0: z = data0;
       1'b1: z = data1;
      endcase
endmodule
`else
module CDN_bmux2(sel0, data0, data1, z);
  input sel0, data0, data1;
  output z;
  wire sel0, data0, data1;
  wire z;
  wire inv_sel0, w_0, w_1;
  not i_0 (inv_sel0, sel0);
  and a_0 (w_0, inv_sel0, data0);
  and a_1 (w_1, sel0, data1);
  or org (z, w_0, w_1);
endmodule
`endif // ONE_HOT_MUX
`endif
`ifdef RC_CDN_GENERIC_GATE
`else
`ifdef ONE_HOT_MUX
module CDN_bmux8(sel0, data0, data1, sel1, data2, data3, sel2, data4,
     data5, data6, data7, z);
  input sel0, data0, data1, sel1, data2, data3, sel2, data4, data5,
       data6, data7;
  output z;
  wire sel0, data0, data1, sel1, data2, data3, sel2, data4, data5,
       data6, data7;
  reg  z;
  always 
    @(sel0 or sel1 or sel2 or data0 or data1 or data2 or data3 or data4
         or data5 or data6 or data7) 
      case ({sel0, sel1, sel2})
       3'b000: z = data0;
       3'b100: z = data1;
       3'b010: z = data2;
       3'b110: z = data3;
       3'b001: z = data4;
       3'b101: z = data5;
       3'b011: z = data6;
       3'b111: z = data7;
      endcase
endmodule
`else
module CDN_bmux8(sel0, data0, data1, sel1, data2, data3, sel2, data4,
     data5, data6, data7, z);
  input sel0, data0, data1, sel1, data2, data3, sel2, data4, data5,
       data6, data7;
  output z;
  wire sel0, data0, data1, sel1, data2, data3, sel2, data4, data5,
       data6, data7;
  wire z;
  wire inv_sel0, inv_sel1, inv_sel2, w_0, w_1, w_2, w_3, w_4;
  wire w_5, w_6, w_7;
  not i_0 (inv_sel0, sel0);
  not i_1 (inv_sel1, sel1);
  not i_2 (inv_sel2, sel2);
  and a_0 (w_0, inv_sel2, inv_sel1, inv_sel0, data0);
  and a_1 (w_1, inv_sel2, inv_sel1, sel0, data1);
  and a_2 (w_2, inv_sel2, sel1, inv_sel0, data2);
  and a_3 (w_3, inv_sel2, sel1, sel0, data3);
  and a_4 (w_4, sel2, inv_sel1, inv_sel0, data4);
  and a_5 (w_5, sel2, inv_sel1, sel0, data5);
  and a_6 (w_6, sel2, sel1, inv_sel0, data6);
  and a_7 (w_7, sel2, sel1, sel0, data7);
  or org (z, w_0, w_1, w_2, w_3, w_4, w_5, w_6, w_7);
endmodule
`endif // ONE_HOT_MUX
`endif
