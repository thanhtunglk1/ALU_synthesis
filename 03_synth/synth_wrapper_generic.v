
// Generated by Cadence Genus(TM) Synthesis Solution GENUS15.20 - 15.20-p004_1
// Generated on: May 18 2025 10:43:32

// Verification Directory fv/synth_wrapper 

module cla_4bit(a, b, cin, s, cout);
  input [3:0] a, b;
  input cin;
  output [3:0] s;
  output cout;
  wire [3:0] a, b;
  wire cin;
  wire [3:0] s;
  wire cout;
  wire [3:0] p;
  wire [3:0] g;
  wire \c[1] , \c[2] , \c[3] , n_9, n_10, n_11, n_12, n_13;
  wire n_14, n_15, n_17, n_19, n_21, n_22, n_23, n_25;
  wire n_27, n_29, n_32, n_34, n_40;
  xor g1 (p[0], a[0], b[0]);
  and g10 (n_14, p[2], g[1]);
  and g12 (n_15, p[2], p[1]);
  and g13 (n_17, n_15, g[0]);
  and g16 (n_19, n_15, p[0]);
  and g17 (n_21, n_19, cin);
  and g19 (n_22, p[3], g[2]);
  and g2 (g[1], a[1], b[1]);
  and g21 (n_23, p[3], p[2]);
  and g22 (n_25, n_23, g[1]);
  and g25 (n_27, n_23, p[1]);
  and g26 (n_29, n_27, g[0]);
  and g3 (n_9, p[0], cin);
  and g30 (n_32, n_27, p[0]);
  and g31 (n_34, n_32, cin);
  xor g34 (p[1], a[1], b[1]);
  xor g35 (p[2], a[2], b[2]);
  xor g36 (p[3], a[3], b[3]);
  and g37 (g[0], a[0], b[0]);
  and g38 (g[2], a[2], b[2]);
  and g39 (g[3], a[3], b[3]);
  or g4 (\c[1] , g[0], n_9);
  xor g40 (s[0], p[0], cin);
  xor g41 (s[1], p[1], \c[1] );
  xor g42 (s[2], p[2], \c[2] );
  xor g43 (s[3], p[3], \c[3] );
  or g44 (\c[3] , g[2], n_14, n_17, n_21);
  or g45 (n_40, g[3], n_22);
  or g46 (cout, n_25, n_29, n_34, n_40);
  and g5 (n_10, p[1], g[0]);
  or g6 (n_12, g[1], n_10);
  and g7 (n_11, p[1], p[0]);
  and g8 (n_13, n_11, cin);
  or g9 (\c[2] , n_12, n_13);
endmodule

module shift_left(a, b, result);
  input [3:0] a, b;
  output [3:0] result;
  wire [3:0] a, b;
  wire [3:0] result;
  wire [3:0] temp_0;
  wire n_6, n_7, n_8, n_22, n_23, n_24, n_25, n_26;
  wire n_27, n_31, n_33, n_92, n_93, n_123, n_124;
  CDN_bmux2 mux_10_18_g3(.sel0 (b[0]), .data0 (a[1]), .data1 (a[0]), .z
       (temp_0[1]));
  CDN_bmux2 g1(.sel0 (b[0]), .data0 (a[3]), .data1 (a[2]), .z (n_6));
  CDN_bmux2 g2(.sel0 (b[1]), .data0 (n_6), .data1 (temp_0[1]), .z
       (n_7));
  not g3 (n_8, n_7);
  or g4 (n_92, n_8, b[3]);
  or g5 (n_93, n_92, b[2]);
  not g6 (result[3], n_93);
  not g11 (result[1], n_123);
  CDN_bmux2 g12(.sel0 (b[0]), .data0 (a[2]), .data1 (a[1]), .z (n_124));
  not g13 (n_24, n_124);
  not g14 (n_22, a[0]);
  or g15 (n_23, n_22, b[0]);
  CDN_bmux2 g16(.sel0 (b[1]), .data0 (n_24), .data1 (n_23), .z (n_25));
  or g17 (n_26, n_25, b[3]);
  or g18 (n_27, n_26, b[2]);
  not g19 (result[2], n_27);
  not g23 (result[0], n_31);
  or g24 (n_31, n_23, b[1], b[3], b[2]);
  or g25 (n_123, n_33, b[1], b[3], b[2]);
  not g26 (n_33, temp_0[1]);
endmodule

module shift_right(a, b, result);
  input [3:0] a, b;
  output [3:0] result;
  wire [3:0] a, b;
  wire [3:0] result;
  wire [3:0] temp_0;
  wire n_6, n_7, n_8, n_22, n_23, n_24, n_25, n_26;
  wire n_27, n_31, n_33, n_92, n_93, n_123, n_124;
  CDN_bmux2 mux_10_18_g2(.sel0 (b[0]), .data0 (a[2]), .data1 (a[3]), .z
       (temp_0[2]));
  CDN_bmux2 g1(.sel0 (b[0]), .data0 (a[0]), .data1 (a[1]), .z (n_6));
  CDN_bmux2 g2(.sel0 (b[1]), .data0 (n_6), .data1 (temp_0[2]), .z
       (n_7));
  not g3 (n_8, n_7);
  or g4 (n_92, n_8, b[3]);
  or g5 (n_93, n_92, b[2]);
  not g6 (result[0], n_93);
  not g11 (result[2], n_123);
  CDN_bmux2 g12(.sel0 (b[0]), .data0 (a[1]), .data1 (a[2]), .z (n_124));
  not g13 (n_24, n_124);
  not g14 (n_22, a[3]);
  or g15 (n_23, n_22, b[0]);
  CDN_bmux2 g16(.sel0 (b[1]), .data0 (n_24), .data1 (n_23), .z (n_25));
  or g17 (n_26, n_25, b[3]);
  or g18 (n_27, n_26, b[2]);
  not g19 (result[1], n_27);
  not g23 (result[3], n_31);
  or g24 (n_31, n_23, b[1], b[3], b[2]);
  or g25 (n_123, n_33, b[1], b[3], b[2]);
  not g26 (n_33, temp_0[2]);
endmodule

module alu(clk, rst_n, a, b, op, result, carry);
  input clk, rst_n;
  input [3:0] a, b;
  input [2:0] op;
  output [3:0] result;
  output carry;
  wire clk, rst_n;
  wire [3:0] a, b;
  wire [2:0] op;
  wire [3:0] result;
  wire carry;
  wire [3:0] b_value;
  wire [3:0] sum;
  wire [3:0] xor_4;
  wire [3:0] not_5;
  wire [3:0] sleft_7;
  wire [3:0] sright_6;
  wire [3:0] and_2;
  wire [3:0] or_3;
  wire c, n_6, n_66, n_67, n_68, n_69, n_103, n_106;
  wire n_109, n_112, n_115, n_118, n_121, n_132, n_133, n_134;
  wire n_135, n_136, n_137, n_138, n_139, n_140, p_carry;
  cla_4bit adder_4bit(.a (a), .b (b_value), .cin (op[0]), .s (sum),
       .cout (c));
  shift_left shift_left_4bit(.a (a), .b (b), .result (sleft_7));
  shift_right shift_right_4bit(.a (a), .b (b), .result (sright_6));
  CDN_flop carry_reg(.clk (clk), .d (p_carry), .sena (1'b1), .aclr
       (n_6), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (carry));
  xor g1 (b_value[0], b[0], op[0]);
  xor g13 (b_value[1], b[1], op[0]);
  xor g14 (b_value[2], b[2], op[0]);
  xor g15 (b_value[3], b[3], op[0]);
  xor g22 (xor_4[0], a[0], b[0]);
  xor g23 (xor_4[1], a[1], b[1]);
  xor g24 (xor_4[2], a[2], b[2]);
  not g25 (not_5[3], a[3]);
  not g26 (not_5[2], a[2]);
  not g27 (not_5[1], a[1]);
  not g28 (not_5[0], a[0]);
  xor g4 (xor_4[3], a[3], b[3]);
  not g9 (n_6, rst_n);
  CDN_flop \result_reg[0] (.clk (clk), .d (n_69), .sena (1'b1), .aclr
       (n_6), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (result[0]));
  CDN_flop \result_reg[1] (.clk (clk), .d (n_68), .sena (1'b1), .aclr
       (n_6), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (result[1]));
  CDN_flop \result_reg[2] (.clk (clk), .d (n_67), .sena (1'b1), .aclr
       (n_6), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (result[2]));
  CDN_flop \result_reg[3] (.clk (clk), .d (n_66), .sena (1'b1), .aclr
       (n_6), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (result[3]));
  CDN_mux7 mux_p_result_24_14_g5(.sel0 (n_103), .data0 (sum[3]), .sel1
       (n_106), .data1 (and_2[3]), .sel2 (n_109), .data2 (or_3[3]),
       .sel3 (n_112), .data3 (xor_4[3]), .sel4 (n_115), .data4
       (not_5[3]), .sel5 (n_118), .data5 (sright_6[3]), .sel6 (n_121),
       .data6 (sleft_7[3]), .z (n_66));
  CDN_mux7 mux_p_result_24_14_g13(.sel0 (n_103), .data0 (sum[2]), .sel1
       (n_106), .data1 (and_2[2]), .sel2 (n_109), .data2 (or_3[2]),
       .sel3 (n_112), .data3 (xor_4[2]), .sel4 (n_115), .data4
       (not_5[2]), .sel5 (n_118), .data5 (sright_6[2]), .sel6 (n_121),
       .data6 (sleft_7[2]), .z (n_67));
  CDN_mux7 mux_p_result_24_14_g14(.sel0 (n_103), .data0 (sum[1]), .sel1
       (n_106), .data1 (and_2[1]), .sel2 (n_109), .data2 (or_3[1]),
       .sel3 (n_112), .data3 (xor_4[1]), .sel4 (n_115), .data4
       (not_5[1]), .sel5 (n_118), .data5 (sright_6[1]), .sel6 (n_121),
       .data6 (sleft_7[1]), .z (n_68));
  CDN_mux7 mux_p_result_24_14_g15(.sel0 (n_103), .data0 (sum[0]), .sel1
       (n_106), .data1 (and_2[0]), .sel2 (n_109), .data2 (or_3[0]),
       .sel3 (n_112), .data3 (xor_4[0]), .sel4 (n_115), .data4
       (not_5[0]), .sel5 (n_118), .data5 (sright_6[0]), .sel6 (n_121),
       .data6 (sleft_7[0]), .z (n_69));
  nor g6 (n_103, op[1], op[2]);
  not g93 (n_132, op[2]);
  not g94 (n_133, op[1]);
  not g95 (n_134, op[0]);
  not g96 (n_135, b[3]);
  not g97 (n_136, b[2]);
  not g98 (n_137, b[1]);
  not g99 (n_138, b[0]);
  not g100 (n_139, c);
  not g101 (n_140, n_103);
  nor g102 (n_106, op[2], n_133, op[0]);
  nor g103 (and_2[3], not_5[3], n_135);
  nor g104 (n_109, op[2], n_133, n_134);
  nand g105 (or_3[3], not_5[3], n_135);
  nor g106 (n_112, n_132, op[1], op[0]);
  nor g107 (n_115, n_132, op[1], n_134);
  nor g108 (n_118, n_132, n_133, op[0]);
  nor g109 (n_121, n_132, n_133, n_134);
  nor g110 (and_2[2], not_5[2], n_136);
  nand g111 (or_3[2], not_5[2], n_136);
  nor g112 (and_2[1], not_5[1], n_137);
  nand g113 (or_3[1], not_5[1], n_137);
  nor g114 (and_2[0], not_5[0], n_138);
  nand g115 (or_3[0], not_5[0], n_138);
  nor g116 (p_carry, n_139, n_140);
endmodule

module synth_wrapper(clk, rst_n, a, b, op, result, carry);
  input clk, rst_n;
  input [3:0] a, b;
  input [2:0] op;
  output [3:0] result;
  output carry;
  wire clk, rst_n;
  wire [3:0] a, b;
  wire [2:0] op;
  wire [3:0] result;
  wire carry;
  wire [3:0] a_reg;
  wire [3:0] b_reg;
  wire [2:0] op_reg;
  wire carry_reg_48, n_17, \result_reg[0]_36 , \result_reg[1]_37 ,
       \result_reg[2]_38 , \result_reg[3]_39 ;
  alu alu_design(.clk (clk), .rst_n (rst_n), .a (a_reg), .b (b_reg),
       .op (op_reg), .result ({\result_reg[3]_39 , \result_reg[2]_38 ,
       \result_reg[1]_37 , \result_reg[0]_36 }), .carry (carry_reg_48));
  CDN_flop \a_reg_reg[0] (.clk (clk), .d (a[0]), .sena (1'b1), .aclr
       (n_17), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (a_reg[0]));
  CDN_flop \a_reg_reg[1] (.clk (clk), .d (a[1]), .sena (1'b1), .aclr
       (n_17), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (a_reg[1]));
  CDN_flop \a_reg_reg[2] (.clk (clk), .d (a[2]), .sena (1'b1), .aclr
       (n_17), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (a_reg[2]));
  CDN_flop \a_reg_reg[3] (.clk (clk), .d (a[3]), .sena (1'b1), .aclr
       (n_17), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (a_reg[3]));
  CDN_flop \b_reg_reg[0] (.clk (clk), .d (b[0]), .sena (1'b1), .aclr
       (n_17), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (b_reg[0]));
  CDN_flop \b_reg_reg[1] (.clk (clk), .d (b[1]), .sena (1'b1), .aclr
       (n_17), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (b_reg[1]));
  CDN_flop \b_reg_reg[2] (.clk (clk), .d (b[2]), .sena (1'b1), .aclr
       (n_17), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (b_reg[2]));
  CDN_flop \b_reg_reg[3] (.clk (clk), .d (b[3]), .sena (1'b1), .aclr
       (n_17), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (b_reg[3]));
  CDN_flop carry_reg(.clk (clk), .d (carry_reg_48), .sena (1'b1), .aclr
       (n_17), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (carry));
  not g1 (n_17, rst_n);
  CDN_flop \op_reg_reg[0] (.clk (clk), .d (op[0]), .sena (1'b1), .aclr
       (n_17), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (op_reg[0]));
  CDN_flop \op_reg_reg[1] (.clk (clk), .d (op[1]), .sena (1'b1), .aclr
       (n_17), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (op_reg[1]));
  CDN_flop \op_reg_reg[2] (.clk (clk), .d (op[2]), .sena (1'b1), .aclr
       (n_17), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (op_reg[2]));
  CDN_flop \result_reg[0] (.clk (clk), .d (\result_reg[0]_36 ), .sena
       (1'b1), .aclr (n_17), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (result[0]));
  CDN_flop \result_reg[1] (.clk (clk), .d (\result_reg[1]_37 ), .sena
       (1'b1), .aclr (n_17), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (result[1]));
  CDN_flop \result_reg[2] (.clk (clk), .d (\result_reg[2]_38 ), .sena
       (1'b1), .aclr (n_17), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (result[2]));
  CDN_flop \result_reg[3] (.clk (clk), .d (\result_reg[3]_39 ), .sena
       (1'b1), .aclr (n_17), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (result[3]));
endmodule

`ifdef RC_CDN_GENERIC_GATE
`else
module CDN_flop(clk, d, sena, aclr, apre, srl, srd, q);
  input clk, d, sena, aclr, apre, srl, srd;
  output q;
  wire clk, d, sena, aclr, apre, srl, srd;
  wire q;
  reg  qi;
  assign #1 q = qi;
  always 
    @(posedge clk or posedge apre or posedge aclr) 
      if (aclr) 
        qi <= 0;
      else if (apre) 
          qi <= 1;
        else if (srl) 
            qi <= srd;
          else begin
            if (sena) 
              qi <= d;
          end
  initial 
    qi <= 1'b0;
endmodule
`endif
`ifdef RC_CDN_GENERIC_GATE
`else
`ifdef ONE_HOT_MUX // captures one-hot property of select inputs
module CDN_mux7(sel0, data0, sel1, data1, sel2, data2, sel3, data3,
     sel4, data4, sel5, data5, sel6, data6, z);
  input sel0, data0, sel1, data1, sel2, data2, sel3, data3, sel4,
       data4, sel5, data5, sel6, data6;
  output z;
  wire sel0, data0, sel1, data1, sel2, data2, sel3, data3, sel4, data4,
       sel5, data5, sel6, data6;
  reg  z;
  always 
    @(sel0 or sel1 or sel2 or sel3 or sel4 or sel5 or sel6 or data0 or
         data1 or data2 or data3 or data4 or data5 or data6) 
      case ({sel0, sel1, sel2, sel3, sel4, sel5, sel6})
       7'b1000000: z = data0;
       7'b0100000: z = data1;
       7'b0010000: z = data2;
       7'b0001000: z = data3;
       7'b0000100: z = data4;
       7'b0000010: z = data5;
       7'b0000001: z = data6;
       default: z = 1'bX;
      endcase
endmodule
`else
module CDN_mux7(sel0, data0, sel1, data1, sel2, data2, sel3, data3,
     sel4, data4, sel5, data5, sel6, data6, z);
  input sel0, data0, sel1, data1, sel2, data2, sel3, data3, sel4,
       data4, sel5, data5, sel6, data6;
  output z;
  wire sel0, data0, sel1, data1, sel2, data2, sel3, data3, sel4, data4,
       sel5, data5, sel6, data6;
  wire z;
  wire w_0, w_1, w_2, w_3, w_4, w_5, w_6;
  and a_0 (w_0, sel0, data0);
  and a_1 (w_1, sel1, data1);
  and a_2 (w_2, sel2, data2);
  and a_3 (w_3, sel3, data3);
  and a_4 (w_4, sel4, data4);
  and a_5 (w_5, sel5, data5);
  and a_6 (w_6, sel6, data6);
  or org (z, w_0, w_1, w_2, w_3, w_4, w_5, w_6);
endmodule
`endif // ONE_HOT_MUX
`endif
`ifdef RC_CDN_GENERIC_GATE
`else
`ifdef ONE_HOT_MUX
module CDN_bmux2(sel0, data0, data1, z);
  input sel0, data0, data1;
  output z;
  wire sel0, data0, data1;
  reg  z;
  always 
    @(sel0 or data0 or data1) 
      case ({sel0})
       1'b0: z = data0;
       1'b1: z = data1;
      endcase
endmodule
`else
module CDN_bmux2(sel0, data0, data1, z);
  input sel0, data0, data1;
  output z;
  wire sel0, data0, data1;
  wire z;
  wire inv_sel0, w_0, w_1;
  not i_0 (inv_sel0, sel0);
  and a_0 (w_0, inv_sel0, data0);
  and a_1 (w_1, sel0, data1);
  or org (z, w_0, w_1);
endmodule
`endif // ONE_HOT_MUX
`endif
